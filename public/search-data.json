[{"title":"Getting Started with Relay Client","description":"Download, install, and set up the Relay client to connect to your first chat server","url":"/docs/client/getting-started","content":"The Relay client is a modern desktop chat application built with Electron. It connects to self-hosted Relay servers, giving you complete control over your chat experience while maintaining a sleek, user-friendly interface. ## Download and Installation ### System Requirements **Windows**: Windows 10 or later (64-bit) **Linux**: Ubuntu 18.04+, Debian 10+, or equivalent ### Download Options ## Initial Setup ### First Launch When you first launch Relay, you'll see the home screen with no servers connected. The interface includes: - **Sidebar**: Navigation between servers and settings - **Main area**: Server list and connection status - **Breadcrumb**: Current location indicator ### Joining Your First Server To connect to a Relay server, you'll need: **Server URL**: The address of the Relay server (e.g., `http://192.168.1.100:8080`) **Username**: Your desired username (must be unique on the server) **Nickname**: Your display name (can be changed later) **Invite Code**: A valid invite code from the server administrator #### Step-by-Step Connection Process **Click \"Join Server\"** button on the home screen or in the sidebar **Fill in the connection details:** - **Server URL**: Enter the complete URL including protocol (http:// or https://) - **Username**: Choose a unique identifier (alphanumeric characters recommended) - **Nickname**: Your display name that others will see - **Invite Code**: Paste the invite code provided by the server admin **Click \"Join Server\"** to initiate the connection **Wait for connection**: The client will generate cryptographic keys and authenticate with the server ### Understanding Server Connection #### Connection Status Indicators - **Green dot**: Server is online and connected - **Red dot**: Server is offline or unreachable - **\"Connecting...\"**: Attempting to establish connection - **\"Retrying\"**: Automatically retrying failed connections #### Automatic Features ## Managing Multiple Servers ### Server List Organization Relay supports connecting to multiple servers simultaneously: - **Drag and drop** servers in the sidebar to reorder them - **Server icons** display custom server branding when available - **Connection status** is shown for each server individually ### Server Management Actions Right-click on any server in the sidebar to access: **Export Identity**: Save your cryptographic identity for backup **Retry Connection**: Manually retry failed connections **Leave Server**: Disconnect and remove the server ## Troubleshooting Common Issues ### Connection Problems ### Performance Tips **Close unused servers** to reduce memory usage **Limit concurrent connections** if experiencing slowdowns **Update regularly** for performance improvements and bug fixes ## Next Steps Once you've successfully connected to your first server: Explore Client Features - Learn about channels, messaging, and voice chat Customize Settings - Personalize your Relay experience Manage Identities - Backup and restore your server identities","excerpt":"The Relay client is a modern desktop chat application built with Electron. It connects to self-hosted Relay servers, giving you complete control over your chat ..."},{"title":"Relay Settings","description":"Configure Relay to match your preferences with these available settings","url":"/docs/client/settings","content":"Customize your Relay experience with these configurable settings. Modify themes, appearance, audio settings, shortcuts, and more to personalize your communication experience.","excerpt":"Customize your Relay experience with these configurable settings. Modify themes, appearance, audio settings, shortcuts, and more to personalize your communicati..."},{"title":"Relay Features","description":"Discover the powerful features that make Relay a complete self-hosted chat solution","url":"/docs/features","content":"Relay offers a comprehensive set of features designed for modern team communication while maintaining complete control over your data through self-hosting. ## Core Communication Features ## Advanced Messaging ### Rich Message Features ### Message Management **Message History**: Complete message history with efficient pagination **Message Deletion**: Remove messages with proper permission controls **Threaded Conversations**: Reply chains for organized discussions **Message Reactions**: React to messages with emoji (coming soon) ## Voice Communication ### Audio Features ## User Management & Security ### Authentication & Identity ### Permission System ## Server Administration ### Moderation Tools **User Kicks**: Temporarily remove disruptive users **User Bans**: Permanently or temporarily ban users with reason tracking **Ban Management**: View, edit, and remove existing bans **Message Moderation**: Delete inappropriate messages **Channel Moderation**: Control access to specific channels ### Server Configuration ## Client Application Features ### Cross-Platform Desktop App ### User Experience **Drag & Drop**: Intuitive file sharing through drag and drop **Auto-Updates**: Seamless application updates (when available) **System Integration**: Native notifications and system tray integration **Window Management**: Custom or traditional window controls **Profile Management**: Global profile with per-server identity management ## Technical Features ### Performance & Reliability ### Self-Hosting Benefits **Data Ownership**: Your messages, files, and user data remain on your servers **Privacy Control**: No third-party data collection or tracking **Customization**: Modify and extend the platform to meet your specific needs **Cost Control**: No per-user fees or subscription costs **Network Control**: Deploy on internal networks or public cloud infrastructure **Compliance**: Meet specific regulatory or organizational requirements ## Integration & APIs ### Developer Features ### API Capabilities **Message Management**: Send, edit, delete, and search messages programmatically **User Management**: Manage users, roles, and permissions through API calls **Channel Operations**: Create and manage channels and groups via API **Real-time Events**: Subscribe to live events through WebSocket connections **File Operations**: Upload and manage attachments through REST endpoints ## Getting Started Ready to experience these features? Choose your path:","excerpt":"Relay offers a comprehensive set of features designed for modern team communication while maintaining complete control over your data through self-hosting. ## C..."},{"title":"Relay Server API Reference","description":"Complete overview of Relay server API endpoints for authentication, messaging, voice chat, and server management","url":"/docs/server/api","content":"This page provides a comprehensive overview of available API endpoints in the Relay server. All endpoints use your server's base URL (e.g., `http://localhost:8080` or `https://your-relay-server.com`). ## Authentication Most endpoints require authentication. Include the token in the `Authorization` header: ``` Authorization: Bearer ``` ## Rate Limiting The server implements rate limiting on different endpoint categories: - **Auth endpoints**: Limited login/join attempts - **Message endpoints**: Prevents message spam - **Invite endpoints**: Controls invite creation - **Global endpoints**: General rate limiting for all other endpoints ## Response Format API responses follow a consistent JSON structure: ```json // Success Response { \"success\": true, \"data\": { /* Response data */ } } // Error Response { \"success\": false, \"error\": \"Error message description\" } ``` ## WebSocket Events Real-time communication uses WebSocket connections with these event types: ### Connection & User Status Events - `online_users` - List of currently online users - `user_status` - User online/offline status changes ### Message Events - `new_message` - New chat messages posted to channels - `message_reply` - Replies to existing messages - `message_deleted` - Message deletion notifications - `message_edited` - Message edit notifications - `message_pinned` - Message pinned to channel - `message_unpinned` - Message unpinned from channel - `user_tagged` - User mentioned/tagged in a message ### Channel Events - `group_created` - New channel group created - `channel_created` - New channel created - `channel_deleted` - Channel removed - `channel_update` - Channel settings modified - `channel_permission_updated` - Channel permissions modified - `channel_permission_deleted` - Channel permissions removed ### Role Events - `role_created` - New role created - `role_updated` - Role settings modified - `role_deleted` - Role removed - `role_assigned` - Role assigned to user - `role_removed` - Role removed from user ### User Events - `user_updated` - User information changed - `user_profile_updated` - User profile/avatar updated - `user_left` - User left the server ### Server Events - `server_icon_updated` - Server icon/avatar changed - `server_config_updated` - Server configuration modified ### Voice Chat Events - `user_joined_voice` - User joined voice channel - `user_left_voice` - User left voice channel - `voice_state_update` - Voice state changes (mute/deafen) - `speaking_update` - Voice activity detection updates ### WebRTC Events - `webrtc_config` - WebRTC configuration for voice chat - `create_webrtc_offer` - WebRTC connection offer - `webrtc_answer` - WebRTC connection answer - `webrtc_ice_candidate` - ICE candidate exchange - `webrtc_connection_status` - WebRTC connection status updates - `connection_quality_update` - Voice connection quality metrics","excerpt":"This page provides a comprehensive overview of available API endpoints in the Relay server. All endpoints use your server's base URL (e.g., `http://localhost:80..."},{"title":"server","description":"","url":"/docs/server","content":"","excerpt":""}]